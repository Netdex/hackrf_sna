name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install Required Packages (ubuntu-only)
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get install xorg-dev libusb-1.0-0-dev

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - name: Get Commit Hash
      id: commit-hash
      shell: bash
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        
    - name: Upload Artifact (ubuntu-only)
      uses: actions/upload-artifact@v2
      if: contains(matrix.os, 'ubuntu')
      with:
        name: hackrf_sna-${{ matrix.os }}-${{ steps.commit-hash.outputs.sha_short }}
        path: ${{runner.workspace}}/build/hackrf_sna/

    - name: Upload Artifact (windows-only)
      uses: actions/upload-artifact@v2
      if: contains(matrix.os, 'windows')
      with:
        name: hackrf_sna-${{ matrix.os }}-${{ steps.commit-hash.outputs.sha_short }}
        path: ${{runner.workspace}}/build/hackrf_sna/Release/
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.commit-hash.outputs.sha_short }}
        release_name: Build ${{ steps.commit-hash.outputs.sha_short }}
        draft: false
        prerelease: true
        
    - name: Upload Release Asset (windows-only)
      if: contains(matrix.os, 'windows')
      id: upload-release-asset-windows 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./hackrf_sna-${{ matrix.os }}.zip
        asset_name: hackrf_sna-${{ matrix.os }}.zip
        asset_content_type: application/zip
   
